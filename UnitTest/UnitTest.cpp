#include "pch.h"
#include "CppUnitTest.h"
#include "Tree.h"
#include <cstdlib>
#include <ctime>

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTest
{
	TEST_CLASS(UnitTest)
	{
	public:
		
		TEST_METHOD(TestMethod1)
		{

            // tree(0) -> tree(int debug) -> 0 = false, 1 = true
            Tree tree(0);
            int y;

            int numbers[5] = { 1,2,3,4,5 };

            for (int x = 0; x < 5; x++)
            {
                y = numbers[x];
                tree.Add(y);
            }

            y = tree.Add(1);
            Assert::IsTrue(y == 1);

        }

        TEST_METHOD(TestMethod2)
        {
            int result = 0;
            int numbers[100] = { 195, 781, 611, 382, 967, 769, 567, 960, 13, 761, 563, 956, 361, 849, 747, 352, 190, 744, 546, 742, 937, 134, 538, 140, 136, 922, 920, 350, 325, 915, 519, 472, 710, 709, 905, 985, 703, 897, 304, 499, 743, 101, 691, 886, 24, 96, 735, 882, 93, 289, 91, 286, 876, 316, 489, 478, 683, 204, 275, 273, 907, 879, 663, 38, 598, 658, 854, 652, 650, 451, 646, 645, 37, 838, 623, 35, 258, 237, 629, 628, 429, 821, 426, 225, 618, 221, 23, 219, 21, 414, 412, 871, 804, 604, 799, 444, 7, 202, 123, 788 };

            // tree(0) -> tree(int debug) -> 0 = false, 1 = true
            Tree tree(0);
            int y;

            result = tree.Remove(77);

            Assert::IsTrue(result == 0);

            for (int x = 0; x < 100; x++)
            {
                y = numbers[x];
                tree.Add(y);
            }

            result = tree.Remove(563);
            Assert::IsTrue(result == 1);

        }
	
        TEST_METHOD(TestMethod3)
        {

            int numbers[100] = { 195, 781, 611, 382, 967, 769, 567, 960, 13, 761, 563, 956, 361, 849, 747, 352, 190, 744, 546, 742, 937, 134, 538, 140, 136, 922, 920, 350, 325, 915, 519, 472, 710, 709, 905, 985, 703, 897, 304, 499, 743, 101, 691, 886, 24, 96, 735, 882, 93, 289, 91, 286, 876, 316, 489, 478, 683, 204, 275, 273, 907, 879, 663, 38, 598, 658, 854, 652, 650, 451, 646, 645, 37, 838, 623, 35, 258, 237, 629, 628, 429, 821, 426, 225, 618, 221, 23, 219, 21, 414, 412, 871, 804, 604, 799, 444, 7, 202, 123, 788 };
            // tree(0) -> tree(int debug) -> 0 = false, 1 = true
            Tree tree(0);
            int y;
            for (int x = 0; x < 100; x++)
            {
                y = numbers[x];
                tree.Add(y);
            }

            int fv = tree.Find(611);

            Assert::IsTrue(fv == 1);
        
        }

        TEST_METHOD(TestMethod4)
        {
            int numbers[100] = { 195, 781, 611, 382, 967, 769, 567, 960, 13, 761, 563, 956, 361, 849, 747, 352, 190, 744, 546, 742, 937, 134, 538, 140, 136, 922, 920, 350, 325, 915, 519, 472, 710, 709, 905, 985, 703, 897, 304, 499, 743, 101, 691, 886, 24, 96, 735, 882, 93, 289, 91, 286, 876, 316, 489, 478, 683, 204, 275, 273, 907, 879, 663, 38, 598, 658, 854, 652, 650, 451, 646, 645, 37, 838, 623, 35, 258, 237, 629, 628, 429, 821, 426, 225, 618, 221, 23, 219, 21, 414, 412, 871, 804, 604, 799, 444, 7, 202, 123, 788 };
            // tree(0) -> tree(int debug) -> 0 = false, 1 = true
            Tree tree(0);
            int y;
            for (int x = 0; x < 100; x++)
            {
                y = numbers[x];
                tree.Add(y);
            }
            int fv = tree.Find(1000);
            Assert::IsTrue(fv != 1000);
        }

        TEST_METHOD(TestMethod5)
        {

            // tree(0) -> tree(int debug) -> 0 = false, 1 = true
            Tree tree(0);
            int y;

            int numbers[100] = { 195, 781, 611, 382, 967, 769, 567, 960, 13, 761, 563, 956, 361, 849, 747, 352, 190, 744, 546, 742, 937, 134, 538, 140, 136, 922, 920, 350, 325, 915, 519, 472, 710, 709, 905, 985, 703, 897, 304, 499, 743, 101, 691, 886, 24, 96, 735, 882, 93, 289, 91, 286, 876, 316, 489, 478, 683, 204, 275, 273, 907, 879, 663, 38, 598, 658, 854, 652, 650, 451, 646, 645, 37, 838, 623, 35, 258, 237, 629, 628, 429, 821, 426, 225, 618, 221, 23, 219, 21, 414, 412, 871, 804, 604, 799, 444, 7, 202, 123, 788 };

            for (int x = 0; x < 100; x++)
            {
                y = numbers[x];
                tree.Add(y);
            }

            y = tree.Minimum();
            Assert::IsTrue(y == 7);
            y = tree.Maximum();
            Assert::IsTrue(y = 985);

        }
    };
}
